
-- Type aliases --------------------------------------------------------
type Selector: String

type EventType: String

type Classes: [String] | String

type NodeValue: [String] | String

type Coll a: [a]


-- Module interfaces ---------------------------------------------------
type EventShim
  *listen: EventType -> (Event -> Bool) -> Coll a -> ()
  *remove: EventType -> (Event -> Bool) -> Coll a -> ()

type SelectorEngine
  querySelectorAll: Selector, Element? -> Coll Element
  matchesSelector: Selector -> Element -> Bool


-- Domina modules ------------------------------------------------------

module Collection
  head: Coll a -> Maybe a
  tail: Coll a -> Coll a
  last: Coll a -> Maybe a
  isEmpty: Coll a -> Bool

  asCollection: a -> Coll a
  asCollection: NodeList a -> Coll a
  asCollection: [a] -> Coll a

module Folding
  map: (a -> b) -> Coll a -> Coll b
  each: (a -> ()) -> Coll a -> Coll a
  reduce: (b, a -> b) -> b -> Coll a -> b
  filter: (a -> Bool) -> Coll a -> Coll a
  flatten: Coll (Coll a) -> Coll a
  concat: Coll a... -> Coll a

module Traversing
  next: (a -> Bool) -> Coll a -> Coll a
  previous: (a -> Bool) -> Coll a -> Coll a
  siblings: (a -> Bool) -> Coll a -> Coll a
  parent: (a -> Bool) -> Coll a -> Coll a
  parents: (a -> Bool) -> Coll a -> Coll a
  children: (a -> Bool) -> Coll a -> Coll a

module Query (SelectorEngine)
  matches: Selector -> Element -> Bool
  query: Selector, Element? -> Coll Element

module Event (EventShim)
  *listen: EventType -> (Event -> Bool) -> Coll a -> ()
  *delegate: EventType -> (a -> Bool) -> (Event -> Bool) -> Coll a -> ()
  *deafen: EventType -> (Event -> Bool) -> Coll a -> ()

module Manipulation
  *append: Node -> Coll Node -> Coll Node
  *prepend: Node -> Coll Node -> Coll Node
  *insertBefore: Node -> Coll Node -> Coll Node
  *insertAfter: Node -> Coll Node -> Coll Node
  *detach: Coll Node -> Coll Node
  *replace: Node -> Coll Node -> Coll Node
  *wrap: Node -> Coll Node -> Coll Node
  *clear: Coll Node -> Coll Node
  clone: Coll Node -> Coll Node
  shallowClone: Coll Node -> Coll Node

module Property
  attributes: Coll Element -> [[Attribute]]
  attribute: String -> Coll Element -> [Maybe String]
  *setAttribute: String -> String -> Coll Element -> Coll Element
  *removeAttribute: String -> Coll Element -> Coll Element
  property: String -> Coll Element -> [Maybe a]
  *setProperty: String -> a -> Coll Element -> Coll Element
  *removeProperty: String -> Coll Element -> Coll Element
  text: Coll Element -> [String]
  *setText: String -> Coll Element -> Coll Element
  html: Coll Element -> [String]
  *setHtml: String -> Coll Element -> Coll Element
  value: Coll Input -> [NodeValue]
  *setValue: String -> Coll Input -> Coll Input
  *setValue: String -> Coll MultiSelect -> Coll MultiSelect

module Presentation
  style: String -> Coll Element -> [String]
  computedStyle: String -> Coll Element -> [Maybe String]
  *setStyle: String -> String -> Coll Element -> Coll Element
  classes: Coll Element -> [[String]]
  *addClass: Classes -> Coll Element -> String
  *removeClass: Classes -> Coll Element -> Coll Element
  hasClass: Classes -> Coll Element -> [Bool]
  *toggleClass: Classes -> Coll Element -> Coll Element
  *specifyClassState: Bool -> Classes -> Coll Element -> Coll Element

module Domina (css:SelectorEngine, evt:EventShim)
  {} + collection
     + traversing
     + query (css)
     + event (evt)
     + manipulation
     + property
     + presentation
